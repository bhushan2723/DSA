head = head pointer which store the address of first node in linked list.
pointer = pointer can store the address of the another node.
malloc() = this function is used for the dynamically memory allocation.

---types of linked list---
1.singly linked list.
2.doubly linked list.
3.singly circular list.
4.doubly circular list.

****1.singly ****
1.most common use singly.
2.they can use two node.

//create the linked list and display
// Online C compiler to run C program online

#include <stdio.h>
#include<stdlib.h>
void main()
{

    struct node
    {
        int data; //this is data
        struct node *next;//address of the next node can store here
    };
    struct node *head=NULL; // 1 st head can null
    struct node *newnode; //new node can create 
    struct node *temp; // this pointer variable which is use to temporary store the data and iterate the node
    int choice=1; // choice are initialize 1 because they by default contain 0
    while(choice)
    {
        newnode=(struct node*)malloc(sizeof(struct node)); // node are created
        printf("\n Enter Data : "); // data are input
        scanf("%d",&newnode->data); // 
        newnode->next=NULL; // newnode next part are null
        if (head==NULL) // first time node are created then head are follow the condition 
        {
            head=temp=newnode; // newnode address can store the head and temp
        }
        else // break the condition
        {
            temp->next=newnode; // newnode address assign by the temp of next
            temp=newnode; // newnode is temp
        }
        printf("\n Do you want to continue (0,1)? : "); 
        scanf("%d",&choice);
    }
	// all nodes are print

    printf("\n--------------------------------\n"); // we use space only
    temp=head; 
    while(temp->next!=NULL)
    {
        printf("%d -> ",temp->data);
        temp=temp->next;
    }
    printf("%d",temp->data);
}

example : -


#include <stdio.h>
#include<stdlib.h>
struct node {
	int data;
	struct node *next;
}*head,*newnode,*temp;
int pos;
int n;
void create(int n);
void print();
void addbig();
void addend();
void addspecific(int pos);
void delbeg();
void delend();
void delspecpos();
void getlength();
void reverse();
int main()
{
	int num,choice;
		while(1){
	printf("\nENTER '1' TO CREATE LINKED LIST: \n");
	printf("\nENTER '2' TO ADD NODE AT BEGINNING:  \n");
	printf("\nENTER '3' TO ADD AT NODE THE END OF THE LIST: \n");
	printf("\nENTER '4' TO ADD NODE AT SPECIFIC POSITION: \n");
	printf("\nENTER '5' TO DELETE THE FIRST NODE: \n");
	printf("\nENTER '6' TO DELETE LAST NODE: \n");
	printf("\nENTER '7' TO DELETE A NODE FROM SPECIFIC POSITION: \n");
	printf("\nENTER '8' TO GET LENGTH OF THE LIST: \n");
	printf("\nENTER '9' TO REVERSE THE LIST: \n");
	printf("\nENTER '10' TO EXIT: \n");
	scanf("%d",&num);
	switch (num)
	{
	case 1:
	create(n);
	print();
	break;
	case 2:
	addbig();
	print();
	break;
	case 3:
	addend();
	print();
	break;
	case 4:
	addspecific(pos);
	print();
	break;
	case 5:
	delbeg();
	print();
	break;
	case 6:
	delend();
	print();
	break;
	case 7:
	delspecpos();
	print();
	break;
	case 8:
	getlength();
	print();
	break;
	case 9:
    reverse();
    print();
    break;
    case 10:
    	printf("bye bye :) !!");
    	exit(0);
    	break;
    default:
    	printf("WRONG CHOICE...!");
    }//end of switch statement
}//end of while
return 0;
}//end of main
void create(int n) // create the linked list
{
	printf("enter the length of the list: ");
	scanf("%d",&n);
	struct node *newnode;
	head=0;
int i;
	for(i=0;i<n;i++)
{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("enter the data of node: ");
	scanf("%d",&newnode->data);
	newnode->next=0;
if (head==0)
{
	head=temp=newnode;
}
else {temp->next=newnode;
temp=newnode;
}
}
}
void print()
{
	temp=head;
	printf("\nthe list is:  \n");
	while(temp!=0)
	{
		printf("%d  ",temp->data);
			temp=temp->next;
	}

}
void addbig()
{
	struct node *newnode;
	if (head==0)
	{
		printf("invalid position");
	}
	else
	{
		newnode=(struct node *)malloc(sizeof(struct node));
		printf("\nenter the data of new beginning node: ");
		scanf("%d",&newnode->data);
		newnode->next=head;
		head=newnode;
	}
}
void addend()
{
	struct node *newnode;
	temp=head;
	if(head==0)
	{
		printf("invalied position");
	}
	else{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\nenter the data of new last node: ");
		scanf("%d",&newnode->data);
		newnode->next=0;
		while(temp->next!=0)
		{
			temp=temp->next;
		}
		temp->next=newnode;
	}
}
void addspecific(int pos)
{
	int j;
	printf("\nenter position of newnode:  ");
	scanf("%d",&pos);
	struct node *newnode;
	if (pos>n||pos<0)
	{
		printf("invalid position");
	}
	else{
		temp=head;
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\nenter the data of newnode:  ");
		scanf("%d",&newnode->data);
		for(j=0;j<pos-2;j++)
		{
			temp=temp->next;
		}
		newnode->next=temp->next;
		temp->next=newnode;
	}
}
void delbeg()
{
	printf("\n first node will be deleted....\n");
	if (head==0)
	{
		printf("lsit is empty");
	}
	else
	{

	temp=head;
	head=head->next;
	free(temp);
}

}
void delend()
{

	struct node *prevnode;
	printf("\nlast node will be deleted....\n");
	temp=head;
	while(temp->next!=0)
	{
		prevnode=temp;
		temp=temp->next;
	}
	if(temp==head)
	{head=0;
	}
	else{
		prevnode->next=0;
	}
	free (temp);

}
void delspecpos()
{
int x;
int posi;
struct node *nextnode;
temp=head;
printf("\nenter the position of node you want to delete: ");
scanf("%d",&posi);
for(x=0;x<posi-2;x++)
{
	temp=temp->next;
}
nextnode=temp->next;
temp->next=nextnode->next;
free(nextnode);
}
void getlength()
{
temp=head;
int count;
while(temp!=0)
{
	count++;
	temp=temp->next;
}
	printf("\n list length is:  %d",count);
}
void reverse()
{
struct node *prevnode,*current,*nextnode;
prevnode=0;
current=nextnode=head;
while(nextnode!=0)
{
	nextnode=nextnode->next;
	current->next=prevnode;
	prevnode=current;
	current=nextnode;
}
	head=prevnode;
}



--- circular list ---

// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
int main() {
    struct node{
        int data;
        struct node *next;
    };
    struct node *tail=NULL,*temp,*newnode;
    int choice = 1;
    while(choice){
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("Enter data: ");
        scanf("%d",&newnode->data);
        newnode->next=0;
        if(tail==0){
            tail=newnode;
            tail->next=newnode;
        }
        else{
            newnode->next=tail->next;
            tail->next=newnode;
            tail=newnode;
        }
        printf("Do u want to continue press 1 otherwise 0: ");
        scanf("%d",&choice);
    }
printf("first node = %d",tail->next->data);//to check circular
printf("\nValues of cll: ");
temp=tail->next;
do{
    printf("%d\t",temp->data);
    temp=temp->next;
}while(temp!=tail->next);
return 0;
}











************** just understanding to me algorithm ******************

#include<stdio.h>
#define num_emp 5

struct emp {
     int eid;
     char name[50];
     float salary;
     char class;
};

void getdata(struct emp *e)
{
    float basicsal;
    printf("\nEnter the employee ID : ");
    scanf("%d",&e->eid);
    printf("\nEnter the employee name : ");
    scanf("%s",&e->name);
    printf("\nEnter the class of employee : ");
    scanf("%s",&e->class);
    
    if(e->class=='A')
    {
        basicsal = 80000;
        e->salary = basicsal + basicsal * 0.5;
    }
    else if(e->class=='B')
    {
        basicsal = 60000;
        e->salary = basicsal + basicsal * 0.5;
    }
    else if(e->class=='C')
    {
        basicsal = 55000;
        e->salary = basicsal + basicsal * 0.5;
    }
    else
    {
        printf("please enyter the valid class (A,B,C) \n");
    }
}
void displaydata(struct emp e)
{
    printf("\nName of employee : %s",e.name);
    printf("\nID of employee : %d",e.eid);
    printf("\nClass of employee : %c",e.class);
    printf("\nsalary of employee : %f",e.salary);
}

int main()
{
    struct emp emps[num_emp];
    int n;
    printf("\nEnter the number of employee : ");
    scanf("%d",&n);
    
    for(int i=0;i<n;i++)
    {
        printf("\nenter the employee %d details : \n",i+1);
        getdata(&emps[i]);
    }
    
    for(int i=0 ; i < n ;i++)
    {
        printf("\ndetails of employee %d : \n",i+1);
        displaydata(emps[i]);
    }
    return 0;
    
}

//*************************//
//insertion sort

#include<stdio.h>
int main()
{
    int n,i,j;
    printf("\nEnter the size of the array :");
    scanf("%d",&n);
    
    int arr[n];
    printf("\nEnter the array elements \n ");
    for(int i=0 ; i < n ; i++)
    {
        scanf("%d",&arr[i]);
    }
  for(int i=1 ; i< n ; i++)
  {
     int temp = arr[i];
     j = i-1;
     while(j>=0 && arr[j]>temp)
     {
         arr[j+1] = arr[j];
         j--;
     }
     arr[j+1] = temp;
  }
  for(int i=0 ; i < n ; i ++)
  {
      printf("%d\n",arr[i]);
  }
  printf("\n");
    return 0;
}

//****************************************************$$****************************************//

//binary search
#include<stdio.h>
int main()
{
    int n,data,found=0;
    printf("\nEnter the number array size  :");
    scanf("%d",&n);
    
    int arr[n];
    printf("\nEnter the array elements \n");
    for(int i=0 ; i < n ; i++)
    {
        scanf("%d",&arr[i]);
    }
    
    printf("\nEnter the array elements you want to search : ");
    scanf("%d",&data);
    for(int i=0 ; i < n ; i++)
    {
        if(arr[i]== data)
        {
            printf("elements is in index %d",i);
            found=1;
            break;
        }
    }
    if(found == 0)
    {
        printf("\nElemets are not found in array :");
    }else{
        printf("\nElemets are  found in array ");
    }
    return 0;
}






































